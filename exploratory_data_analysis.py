# -*- coding: utf-8 -*-
"""Exploratory Data Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yUYT8L1RNJb4Le3mplVBtNV3c4u7lWxM

Importing dependencies/libraries
"""

import numpy as np  #importing numpy library for numpy arrays handling
import pandas as pd  #for data analysis and loading dataset in tabular format on our environment
from sklearn.preprocessing import LabelEncoder  #to encode categorical labels into numerical form so model can understand it

"""Data collection"""

df=pd.read_csv("/content/data.csv")   #creating data frame and loading dataset

"""Exploratory Data Analysis

# EDA
"""

df.head()  #default method to show first five rows

df.tail()  #showing last 5 rows

# The last column has no name and values,so it is less important and we will remove it from dataframe

df.drop(columns='Unnamed: 32',axis=1,inplace=True) #axis=1 means we are removing column and inplace= true means that this change will have effect on data frame permanently

df.head()

df.shape  #569 rows and 32 features

df.info()  #provides info about datatypes of feature

df.head()

df.isnull().sum()  # sum's up missing values in every feature

"""Diagnosis column is a categorical column while all others columns have continuos values

Discriptive summary of dataset
"""

df.describe()  #Descriptive statistical information

df['diagnosis'].value_counts()  # count values of classes in diagnosis column

# 357 benign labels and 212 malignant class label

# Encoding the target column

label_encoder = LabelEncoder()  # storing label encoder function in variable
labels = label_encoder.fit_transform(df['diagnosis']) #  applying encoding on diagnosis column
df['target'] = labels  # creating new column target  and putting encoded values there
df.drop(columns='diagnosis',axis=1,inplace=True)
# Drop the 'id' column
df.drop(columns='id', axis=1, inplace=True)

df.head()

df['target'].value_counts()  #counts values of target column

"""Grouping data on the basis of mean"""

df.groupby('target').mean()   #groups target on the basis of mean for each benign and malig



"""**Insights from Data text**

1.   No missing values
2.   All the feature have continuos values except 1
diagnosis column that contains labels
3. Mean are slightly more then median that means the distribution is right skewed
4. The data set is slightly imbalance as there are 357 benign class and 212 maignant class label
5. Mean of most features are clearly larger for Malignant class(1) as compare to benign class(0),Group by mean.




"""

